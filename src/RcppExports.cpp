// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// computNeiIndex
List computNeiIndex(List pseData, IntegerVector num_neighbors_foreach_word, List word_neighbors);
RcppExport SEXP _gnSPADE_computNeiIndex(SEXP pseDataSEXP, SEXP num_neighbors_foreach_wordSEXP, SEXP word_neighborsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pseData(pseDataSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type num_neighbors_foreach_word(num_neighbors_foreach_wordSEXP);
    Rcpp::traits::input_parameter< List >::type word_neighbors(word_neighborsSEXP);
    rcpp_result_gen = Rcpp::wrap(computNeiIndex(pseData, num_neighbors_foreach_word, word_neighbors));
    return rcpp_result_gen;
END_RCPP
}
// word_in_doc
bool word_in_doc(StringVector doc, std::string word);
RcppExport SEXP _gnSPADE_word_in_doc(SEXP docSEXP, SEXP wordSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type doc(docSEXP);
    Rcpp::traits::input_parameter< std::string >::type word(wordSEXP);
    rcpp_result_gen = Rcpp::wrap(word_in_doc(doc, word));
    return rcpp_result_gen;
END_RCPP
}
// calc_PGtheta_R
NumericMatrix calc_PGtheta_R(const NumericMatrix& theta_tilda, Eigen::MatrixXd& theta, const int num_doc, const int num_topics);
RcppExport SEXP _gnSPADE_calc_PGtheta_R(SEXP theta_tildaSEXP, SEXP thetaSEXP, SEXP num_docSEXP, SEXP num_topicsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type theta_tilda(theta_tildaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const int >::type num_doc(num_docSEXP);
    Rcpp::traits::input_parameter< const int >::type num_topics(num_topicsSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_PGtheta_R(theta_tilda, theta, num_doc, num_topics));
    return rcpp_result_gen;
END_RCPP
}
// make_wsz_cpp
List make_wsz_cpp(List docs_, List info_, List initialized_);
RcppExport SEXP _gnSPADE_make_wsz_cpp(SEXP docs_SEXP, SEXP info_SEXP, SEXP initialized_SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type docs_(docs_SEXP);
    Rcpp::traits::input_parameter< List >::type info_(info_SEXP);
    Rcpp::traits::input_parameter< List >::type initialized_(initialized_SEXP);
    rcpp_result_gen = Rcpp::wrap(make_wsz_cpp(docs_, info_, initialized_));
    return rcpp_result_gen;
END_RCPP
}
// load_wordid_neighcnt
List load_wordid_neighcnt(List neiPath, CharacterVector vocab);
RcppExport SEXP _gnSPADE_load_wordid_neighcnt(SEXP neiPathSEXP, SEXP vocabSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type neiPath(neiPathSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type vocab(vocabSEXP);
    rcpp_result_gen = Rcpp::wrap(load_wordid_neighcnt(neiPath, vocab));
    return rcpp_result_gen;
END_RCPP
}
// read_dfm_cpp
List read_dfm_cpp(Eigen::SparseMatrix<int> dfm, List W_read, StringVector vocab, double split);
RcppExport SEXP _gnSPADE_read_dfm_cpp(SEXP dfmSEXP, SEXP W_readSEXP, SEXP vocabSEXP, SEXP splitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<int> >::type dfm(dfmSEXP);
    Rcpp::traits::input_parameter< List >::type W_read(W_readSEXP);
    Rcpp::traits::input_parameter< StringVector >::type vocab(vocabSEXP);
    Rcpp::traits::input_parameter< double >::type split(splitSEXP);
    rcpp_result_gen = Rcpp::wrap(read_dfm_cpp(dfm, W_read, vocab, split));
    return rcpp_result_gen;
END_RCPP
}
// keyATM_fit_LDA
List keyATM_fit_LDA(List model, bool resume);
RcppExport SEXP _gnSPADE_keyATM_fit_LDA(SEXP modelSEXP, SEXP resumeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type model(modelSEXP);
    Rcpp::traits::input_parameter< bool >::type resume(resumeSEXP);
    rcpp_result_gen = Rcpp::wrap(keyATM_fit_LDA(model, resume));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gnSPADE_computNeiIndex", (DL_FUNC) &_gnSPADE_computNeiIndex, 3},
    {"_gnSPADE_word_in_doc", (DL_FUNC) &_gnSPADE_word_in_doc, 2},
    {"_gnSPADE_calc_PGtheta_R", (DL_FUNC) &_gnSPADE_calc_PGtheta_R, 4},
    {"_gnSPADE_make_wsz_cpp", (DL_FUNC) &_gnSPADE_make_wsz_cpp, 3},
    {"_gnSPADE_load_wordid_neighcnt", (DL_FUNC) &_gnSPADE_load_wordid_neighcnt, 2},
    {"_gnSPADE_read_dfm_cpp", (DL_FUNC) &_gnSPADE_read_dfm_cpp, 4},
    {"_gnSPADE_keyATM_fit_LDA", (DL_FUNC) &_gnSPADE_keyATM_fit_LDA, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_gnSPADE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
